# This YAML defines a Tenant resource for the Capsule multi-tenancy operator in Kubernetes
# It sets up the 'oil' tenant with specific ownership and role bindings

apiVersion: capsule.clastix.io/v1beta2  # Specifies the API version of the Capsule Tenant resource
kind: Tenant                            # Indicates that this is a Tenant resource
metadata:
  name: oil-role-binding                             # Unique identifier for this Tenant

spec:
  # Owners section defines who has administrative access to this Tenant
  owners:
    - name: alice                       # Specifies 'alice' as an owner
      kind: User                        # Indicates that 'alice' is a User type owner
                                        # Owners typically have full control over the Tenant

  # AdditionalRoleBindings allows for fine-grained access control within the Tenant
  # It lets you assign specific cluster roles to subjects (users, groups, or service accounts)
  additionalRoleBindings:
    - clusterRoleName: 'prometheus-servicemonitors-viewer'  # The specific ClusterRole to be bound
      subjects:                         # List of subjects to whom the role is assigned
        - apiGroup: rbac.authorization.k8s.io  # API group for the subject
          kind: User                    # Type of subject (User, Group, or ServiceAccount)
          name: joe                     # Name of the subject

  # This configuration does the following:
  # 1. Sets up the 'oil' Tenant with 'alice' as the owner
  # 2. Assigns the 'prometheus-servicemonitors-viewer' role to user 'joe'
  #    This likely allows 'joe' to view Prometheus ServiceMonitors in this Tenant
  #    without granting full ownership or admin rights

  # Note: Depending on your requirements, you may want to add more specifications such as:
  # - resourceQuota: to set resource limits for the Tenant
  # - namespaceOptions: to configure settings for namespaces within the Tenant
  # - networkPolicies: to define network isolation rules
  # - and more, based on your specific needs and Capsule's capabilities

# Always refer to the Capsule documentation for the most up-to-date options and best practices